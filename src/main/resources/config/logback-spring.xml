<?xml version="1.0" encoding="UTF-8" ?>
<!--
    对于配置文件：如果配置文件 logback-test.xml 和 logback-spring.xml 都不存在，那么 logback 默认地会调用BasicConfigurator，
    创建一个最小化配置。最小化配置由一个关联到根 logger 的ConsoleAppender 组成。
    输出用模式为%d{HH:mm:ss.SSS} [%thread] %-5level %logger{200} - %msg%n 的 PatternLayoutEncoder 进行格式化，logger{200} 表示该字段压缩为 200个长度显示
    root logger 默认级别是 DEBUG。
    scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <property name="app_name" value="api"/>
    <property name="log_path" value="${user.home}/log/"/>
    <springProperty scope="context" name="loki_url" source="loki.url" defaultValue="localhost"/>

    <!-- key: 标识此timestamp的名字; datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。 -->
    <timestamp key="bySecond" datePattern="yyyy-MM-dd'T'HH:mm:ss.SSSZ"/>

    <!-- 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。 -->
    <contextName>${app_name}</contextName>

    <!-- 子节点appender：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名 -->
    <!-- 控制台输出日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[%X{traceId:-NONE}]%black %magenta(%d{yyyy-MM-dd HH:mm:ss}) %highlight([%thread]) %green(%-5level) [%file.%method:%line] %green(%X{RequestId}) %boldMagenta(%logger{}) - %cyan(%msg%n)</pattern>
        </encoder>
    </appender>

    <!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件的路径及文件名 -->
        <File>${log_path}/${app_name}.log</File>
        <!-- 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true -->
        <append>true</append>
        <!-- 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false -->
        <prudent>false</prudent>
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> <!-- TimeBased默认是一天更新一次 -->
            <!--        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">&lt;!&ndash; 按固定窗口大小生成日志 &ndash;&gt;-->
            <!-- 历史日志文件的存放路径和名称 -->
            <fileNamePattern>${log_path}/error/error_%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!-- 日志文件最大的保存历史 数量-->
            <maxHistory>5000</maxHistory>
            <!-- 必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式 -->
            <!--            <FileNamePattern>logs/${app_name}.log.%i.zip</FileNamePattern>-->
            <!-- 窗口索引最小值 -->
            <!--            <MinIndex>1</MinIndex>-->
            <!-- 窗口索引最大值 -->
            <!--            <MaxIndex>100</MaxIndex>-->
        </rollingPolicy>

        <!-- 告知 RollingFileAppender 合适激活滚动 -->
        <!--        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--            <MaxFileSize>100MB</MaxFileSize>-->
        <!--        </triggeringPolicy>-->

        <!-- 对记录事件进行格式化 -->
        <encoder>
            <pattern>[%X{traceId:-NONE}]%black %magenta(%d{yyyy-MM-dd HH:mm:ss}) %highlight([%thread]) %green(%-5level) [%file.%method:%line] %green(%X{RequestId}) %boldMagenta(%logger{}) - %cyan(%msg%n)</pattern>
        </encoder>
    </appender>

    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志文件的路径及文件名 -->
        <File>${log_path}/${app_name}_debug.log</File>
        <!-- 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true -->
        <append>true</append>
        <!-- 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false -->
        <prudent>false</prudent>
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> <!-- TimeBased默认是一天更新一次 -->
            <!--        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">&lt;!&ndash; 按固定窗口大小生成日志 &ndash;&gt;-->
            <!-- 历史日志文件的存放路径和名称 -->
            <fileNamePattern>${log_path}/error/error_%d{yyyy-MM-dd}_debug.log.gz</fileNamePattern>
            <!-- 日志文件最大的保存历史 数量-->
            <maxHistory>5000</maxHistory>
            <!-- 必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式 -->
            <!--            <FileNamePattern>logs/${app_name}.log.%i.zip</FileNamePattern>-->
            <!-- 窗口索引最小值 -->
            <!--            <MinIndex>1</MinIndex>-->
            <!-- 窗口索引最大值 -->
            <!--            <MaxIndex>100</MaxIndex>-->
        </rollingPolicy>

        <!-- 告知 RollingFileAppender 合适激活滚动 -->
        <!--        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--            <MaxFileSize>100MB</MaxFileSize>-->
        <!--        </triggeringPolicy>-->

        <!-- 对记录事件进行格式化 -->
        <encoder>
            <pattern>[%X{traceId:-NONE}]%black %magenta(%d{yyyy-MM-dd HH:mm:ss}) %highlight([%thread]) %green(%-5level) [%file.%method:%line] %green(%X{RequestId}) %boldMagenta(%logger{}) - %cyan(%msg%n)</pattern>
        </encoder>
    </appender>
    <appender name="LOKI" class="com.github.loki4j.logback.Loki4jAppender">
        <http>
            <url>${loki_url}</url>
        </http>
        <format>
            <label>
                <pattern>
                    app=${app_name},date=%d{yyyy-MM-dd HH:mm:ss},host=${HOSTNAME},level=%level,class=%logger{36},thread=%thread,traceId=%X{traceId:-NONE}
                </pattern>
            </label>
            <message>
                <pattern>
                    [%X{traceId:-NONE}]%black %magenta(%d{yyyy-MM-dd HH:mm:ss}) %highlight([%thread]) %green(%-5level) [%file.%method:%line] %green(%X{RequestId}) %boldMagenta(%logger{}) - %cyan(%msg%n)
                </pattern>
            </message>
        </format>
    </appender>


    <!--MyBatis log configure-->
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>
    <logger name="java.sql.ResultSet" level="DEBUG"/>

    <!-- 组件的日志输出：name：找到组件的父级包名，level：输出级别 -->
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.apache.http" level="WARN"/>
    <logger name="sun.rmi" level="WARN"/>
    <logger name="com.zaxxer" level="WARN"/>
    <logger name="cn.hhj.system.listener.LoadConfigListener" level="WARN"/>
    <logger name="org.hibernate" level="WARN"/>
    <logger name="com.baomidou.mybatisplus.core" level="WARN"/>
    <logger name="org.mybatis.spring.mapper" level="WARN"/>
    <logger name="com.baomidou.mybatisplus.extension" level="WARN"/>

    <!-- 表示 >=WARN 级别的日志的输出方式 -->
    <root level="info">
        <appender-ref ref="STDOUT"/> <!-- 控制台输出 -->
    </root>

    <logger name="com.bingchunmoli" level="debug">
        <appender-ref ref="file" additivity="true"/>
    </logger>

    <springProfile name="prod">
        <root level="info">
            <appender-ref ref="LOKI" />
            <appender-ref ref="ERROR"/> <!-- 文件输出 -->
        </root>
    </springProfile>
</configuration>
